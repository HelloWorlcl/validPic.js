{"version":3,"sources":["validPic.js"],"names":["root","window","document","factory","undefined","define","amd","validpic","exports","module","this","validPic","self","allowedFormats","currentFile","currentInput","init","inputs","querySelectorAll","forEach","call","input","onchange","files","validExtension","validMimeType","checkRealMimeType","triggerError","onclick","value","extension","name","replace","toLowerCase","indexOf","type","match","split","realMimeType","reader","FileReader","onloadend","event","arr","Uint8Array","result","subarray","header","i","length","toString","triggerValid","readAsArrayBuffer","CustomEvent","detail","file","error","ERROR_MESSAGE","bubbles","cancelable","dispatchEvent","params","evt","createEvent","initCustomEvent","prototype","Event","addEventListener"],"mappings":";;;;;;CAMC,SAAUA,EAAMC,EAAQC,EAAUC,EAASC,GAClB,kBAAXC,SAAyBA,OAAOC,IAEvCD,OAAQ,WAEJ,MADAL,GAAKO,SAAWJ,EAAQF,EAAQC,GACzBF,EAAKO,WAEU,gBAAZC,SAEdC,OAAOD,QAAUL,EAAQF,EAAQC,GAGjCF,EAAKO,SAAWJ,EAAQF,EAAQC,IAEtCQ,KAAMT,OAAQC,SAAU,SAASD,EAAQC,EAAUE,GACjD,YAwBA,SAASO,KACL,GAAIC,GAAOF,KACPG,GAAkB,MAAO,MAAO,OAAQ,MAAO,MA4HnD,OA1HAD,GAAKE,YAAc,KACnBF,EAAKG,aAAe,KAEpBH,EAAKI,KAAO,WACR,GAAIC,GAASf,EAASgB,iBAAiB,aAEpCD,OACIE,QAAQC,KAAKH,EAAQ,SAASI,GAC7BA,EAAMC,SAAW,WACbV,EAAKE,YAAcO,EAAME,MAAM,GAC/BX,EAAKG,aAAeM,EAEjBT,EAAKY,kBAAoBZ,EAAKa,gBAC7Bb,EAAKc,oBAGLd,EAAKe,gBAKbN,EAAMO,QAAU,WACZlB,KAAKmB,MAAQ,SAO7BjB,EAAKY,eAAiB,WAElB,GAAIM,GAAYlB,EAAKE,YAAYiB,KAAKC,QAAQ,QAAS,GAKvD,OAFAF,GAAaA,GAAalB,EAAKE,YAAYiB,KAAQ,GAAKD,EAAUG,cAE3DpB,EAAeqB,QAAQJ,GAAa,IAI/ClB,EAAKa,cAAgB,WACjB,MAAOb,GAAKE,YAAYqB,KAAKC,MAAM,YAAcvB,EAAeqB,QAAQtB,EAAKE,YAAYqB,KAAKE,MAAM,KAAK,IAAM,IAKnHzB,EAAKc,kBAAoB,WACrB,GACIY,GADAC,EAAS,GAAIC,WAIjBD,GAAOE,UAAY,SAASC,GAKxB,IAAI,GAJAC,GAAM,GAAKC,YAAWL,EAAOM,QAASC,SAAS,EAAG,GAClDC,EAAS,GAGLC,EAAI,EAAGA,EAAIL,EAAIM,OAAQD,IAC3BD,GAAUJ,EAAIK,GAAGE,SAAS,GAI9B,QAAQH,GACJ,IAAK,WACDT,EAAe,WACf,MACJ,KAAK,WACDA,EAAe,WACf,MACJ,KAAK,WACL,IAAK,WACL,IAAK,WACL,IAAK,WACL,IAAK,WACL,IAAK,WACDA,EAAe,YACf,MACJ,SACIA,EAAe,UAIH,YAAjBA,EACC1B,EAAKuC,eAELvC,EAAKe,gBAIbY,EAAOa,kBAAkBxC,EAAKE,cAIlCF,EAAKe,aAAe,WAEhB,GAAIe,GAAQ,GAAIW,aAAY,SACxBC,QACIC,KAAM3C,EAAKE,YACXO,MAAOT,EAAKG,aACZyC,MAAOC,GAEXC,SAAS,EACTC,YAAY,GAGhB/C,GAAKG,aAAa6C,cAAclB,IAIpC9B,EAAKuC,aAAe,WAEhBT,MAAQ,GAAIW,aAAY,WACpBC,QACIC,KAAM3C,EAAKE,YACXO,MAAOT,EAAKG,cAEhB2C,SAAS,EACTC,YAAY,IAGhB/C,EAAKG,aAAa6C,cAAclB,QAG7B9B,EApJX,GAAI6C,GAAgB,oCAEpB,WAGI,QAASJ,GAAYX,EAAOmB,GACxBA,EAASA,IACLH,SAAS,EACTC,YAAY,EACZL,OAAQlD,EAEZ,IAAI0D,GAAM5D,EAAS6D,YAAY,cAE/B,OADAD,GAAIE,gBAAgBtB,EAAOmB,EAAOH,QAASG,EAAOF,WAAYE,EAAOP,QAC9DQ,EAVX,MAAiC,kBAAvB7D,GAAOoD,aAAmC,GAapDA,EAAYY,UAAYhE,EAAOiE,MAAMD,eAErChE,EAAOoD,YAAcA,OAsIzBnD,EAASiE,iBAAiB,mBAAmB,YACzC,GAAIxD,IAAWK,SACf","file":"validPic.min.js","sourcesContent":["/**\r\n * validPic.js v.0.0.1 (Alpha) - \r\n * https://github.com/alvarotrigo/validPic.js\r\n *\r\n * Copyright (C) 2013 alvarotrigo.com - A project by Alvaro Trigo\r\n */\r\n(function( root, window, document, factory, undefined ) {\r\n    if( typeof define === 'function' && define.amd ) {\r\n        // AMD. Register as an anonymous module.\r\n        define( function() {\r\n            root.validpic = factory(window, document);\r\n            return root.validpic;\r\n        } );\r\n    } else if( typeof exports === 'object' ) {\r\n        // Node. Does not work with strict CommonJS.\r\n        module.exports = factory(window, document);\r\n    } else {\r\n        // Browser globals.\r\n        root.validpic = factory(window, document);\r\n    }\r\n}(this, window, document, function(window, document, undefined){\r\n    'use strict';\r\n\r\n    var ERROR_MESSAGE = 'Please upload a valid image file';\r\n\r\n    (function () {\r\n        if(typeof window.CustomEvent === \"function\") return false;\r\n\r\n        function CustomEvent(event, params) {\r\n            params = params || {\r\n                bubbles: false,\r\n                cancelable: false,\r\n                detail: undefined\r\n            };\r\n            var evt = document.createEvent('CustomEvent');\r\n            evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\r\n            return evt;\r\n        }\r\n\r\n        CustomEvent.prototype = window.Event.prototype;\r\n\r\n        window.CustomEvent = CustomEvent;\r\n    })();\r\n\r\n\r\n    function validPic(){\r\n        var self = this;\r\n        var allowedFormats = ['png', 'jpg', 'jpeg', 'gif', 'bmp'];\r\n\r\n        self.currentFile = null;\r\n        self.currentInput = null;\r\n\r\n        self.init = function(){           \r\n            var inputs = document.querySelectorAll('.valid-pic');\r\n\r\n            if(inputs){\r\n                [].forEach.call(inputs, function(input){\r\n                    input.onchange = function(){\r\n                        self.currentFile = input.files[0];\r\n                        self.currentInput = input;\r\n        \r\n                        if(self.validExtension() && self.validMimeType()){\r\n                            self.checkRealMimeType();\r\n                        }\r\n                        else{\r\n                            self.triggerError();\r\n                        }\r\n                    };\r\n\r\n                    //reseting the value in case they choose the same file later on\r\n                    input.onclick = function(){\r\n                        this.value = null;\r\n                    };\r\n                });\r\n            }\r\n        };\r\n\r\n        // -1st check: valid extension ?\r\n        self.validExtension = function(){\r\n            //using a regular expression to trim everything before final dot (image.gif.php returns php)\r\n            var extension = self.currentFile.name.replace(/^.*\\./, '');\r\n\r\n            //no dot at all?  extension == filename \r\n            extension = (extension == self.currentFile.name) ? '' : extension.toLowerCase();\r\n\r\n            return allowedFormats.indexOf(extension) > -1;\r\n        };\r\n\r\n        //-2nd echeck: validating mime type (can be foolet, so this is just a quick check )\r\n        self.validMimeType = function(){\r\n            return self.currentFile.type.match('image.*') && allowedFormats.indexOf(self.currentFile.type.split(\"/\")[1]) > -1;\r\n        };\r\n\r\n        //reads the image and validates real mime type   http://stackoverflow.com/a/29672957/1081396\r\n        // magic numbers: http://www.garykessler.net/library/file_sigs.html\r\n        self.checkRealMimeType = function(){\r\n            var reader = new FileReader();\r\n            var realMimeType;\r\n\r\n            //running asynchronously!\r\n            reader.onloadend = function(event) {\r\n                var arr = (new Uint8Array(reader.result)).subarray(0, 4);\r\n                var header = '';\r\n                var event;\r\n\r\n                for(var i = 0; i < arr.length; i++) {\r\n                    header += arr[i].toString(16);\r\n                }\r\n\r\n                //magic numbers\r\n                switch (header) {\r\n                    case \"89504e47\":\r\n                        realMimeType = \"image/png\";\r\n                        break;\r\n                    case \"47494638\":\r\n                        realMimeType = \"image/gif\";\r\n                        break;\r\n                    case \"ffd8ffDB\":\r\n                    case \"ffd8ffe0\":\r\n                    case \"ffd8ffe1\":\r\n                    case \"ffd8ffe2\":\r\n                    case \"ffd8ffe3\":\r\n                    case \"ffd8ffe8\":\r\n                        realMimeType = \"image/jpeg\";\r\n                        break;\r\n                    default:\r\n                        realMimeType = \"unknown\"; // Or you can use the blob.type as fallback\r\n                        break;\r\n                }\r\n\r\n                if(realMimeType !== 'unknown'){\r\n                    self.triggerValid();\r\n                }else{\r\n                    self.triggerError();\r\n                }\r\n            };\r\n\r\n            reader.readAsArrayBuffer(self.currentFile);\r\n        };\r\n\r\n        //error custom event\r\n        self.triggerError = function(){\r\n            // create and dispatch the event\r\n            var event = new CustomEvent('error', {\r\n                detail: {\r\n                    file: self.currentFile,\r\n                    input: self.currentInput,\r\n                    error: ERROR_MESSAGE\r\n                },\r\n                bubbles: true,\r\n                cancelable: true\r\n            });\r\n\r\n            self.currentInput.dispatchEvent(event);\r\n        };\r\n\r\n        //success custom event\r\n        self.triggerValid = function(){\r\n            // create and dispatch the event\r\n            event = new CustomEvent('success', {\r\n                detail: {\r\n                    file: self.currentFile,\r\n                    input: self.currentInput\r\n                },\r\n                bubbles: true,\r\n                cancelable: true\r\n            });\r\n\r\n            self.currentInput.dispatchEvent(event);\r\n        };\r\n\r\n        return self;   \r\n    }\r\n\r\n    //document ready?\r\n    document.addEventListener('DOMContentLoaded',function(){\r\n        new validPic().init();\r\n     }, false);       \r\n}));"],"sourceRoot":"/source/"}